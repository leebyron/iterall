/**
 * Copyright (c) 2016, Lee Byron
 * All rights reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
 */

// Note: Flow already has built-in definitions for
// Iterable, Iterator, AsyncIterable, and AsyncIterator so they are not
// defined here.

declare export var $$iterator: '@@iterator'

declare export function isIterable(obj: any): boolean

declare export function isArrayLike(obj: any): boolean

declare export function isCollection(obj: any): boolean

declare export var getIterator: (<TValue>(
  Iterable<TValue>
) => Iterator<TValue>) &
  ((mixed) => void | Iterator<mixed>)

declare export var getIteratorMethod: (<TValue>(
  Iterable<TValue>
) => () => Iterator<TValue>) &
  ((mixed) => void | (() => Iterator<mixed>))

declare export var createIterator: (<TValue>(
  Iterable<TValue>
) => Iterator<TValue>) &
  (({ length: number }) => Iterator<mixed>) &
  ((mixed) => void | Iterator<mixed>)

declare type Callback<TValue, TCollection> = (
  value: TValue,
  index: number,
  collection: TCollection
) => any

declare export var forEach: (<TValue, TCollection: Iterable<TValue>>(
  collection: TCollection,
  callbackFn: Callback<TValue, TCollection>,
  thisArg?: any
) => void) &
  (<TCollection: { length: number }>(
    collection: TCollection,
    callbackFn: Callback<mixed, TCollection>,
    thisArg?: any
  ) => void)

declare export var $$asyncIterator: '@@asyncIterator'

declare export function isAsyncIterable(obj: any): boolean

declare export var getAsyncIterator: (<TValue>(
  AsyncIterable<TValue>
) => AsyncIterator<TValue>) &
  ((mixed) => void | AsyncIterator<mixed>)

declare export var getAsyncIteratorMethod: (<TValue>(
  AsyncIterable<TValue>
) => () => AsyncIterator<TValue>) &
  ((mixed) => void | (() => AsyncIterator<mixed>))

declare export var createAsyncIterator: (<TValue>(
  AsyncIterable<TValue> | Iterable<Promise<TValue> | TValue>
) => AsyncIterator<TValue>) &
  (({ length: number }) => AsyncIterator<mixed>) &
  ((mixed) => void | AsyncIterator<mixed>)

declare export var forAwaitEach: (<TValue, TCollection: AsyncIterable<TValue>>(
  collection: TCollection,
  callbackFn: Callback<TValue, TCollection>,
  thisArg?: any
) => Promise<void>) &
  (<TValue, TCollection: Iterable<Promise<TValue> | TValue>>(
    collection: TCollection,
    callbackFn: Callback<TValue, TCollection>,
    thisArg?: any
  ) => Promise<void>) &
  (<TCollection: { length: number }>(
    collection: TCollection,
    callbackFn: Callback<mixed, TCollection>,
    thisArg?: any
  ) => Promise<void>)
