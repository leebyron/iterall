/**
 * Copyright (c) 2016, Lee Byron
 * All rights reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
 */

// Note: Flow already has built-in definitions for
// Iterable, Iterator, AsyncIterable, and AsyncIterator so they are not
// defined here.

// Note: Flow type definitions are stricter than Typescript's due to lacking
// non-exhaustive function overriding.

declare export var $$iterator: '@@iterator'

declare export function isIterable(obj: any): boolean

declare export function isArrayLike(obj: any): boolean

declare export function isCollection(obj: any): boolean

declare export function getIterator<TValue>(
  iterable: Iterable<TValue>
): Iterator<TValue>

declare export function getIteratorMethod<TValue>(
  iterable: Iterable<TValue>
): () => Iterator<TValue>

declare export function createIterator<TValue>(
  collection: Iterable<TValue>
): Iterator<TValue>
declare export function createIterator(collection: {
  length: number
}): Iterator<mixed>

declare export function forEach<TValue, TCollection: Iterable<TValue>>(
  collection: TCollection,
  callbackFn: (value: TValue, index: number, collection: TCollection) => any,
  thisArg?: any
): void
declare export function forEach<TCollection: { length: number }>(
  collection: TCollection,
  callbackFn: (value: mixed, index: number, collection: TCollection) => any,
  thisArg?: any
): void

declare export var $$asyncIterator: '@@asyncIterator'

declare export function isAsyncIterable(obj: any): boolean

declare export function getAsyncIterator<TValue>(
  asyncIterable: AsyncIterable<TValue>
): AsyncIterator<TValue>

declare export function getAsyncIteratorMethod<TValue>(
  asyncIterable: AsyncIterable<TValue>
): () => AsyncIterator<TValue>

declare export function createAsyncIterator<TValue>(
  collection:
    | AsyncIterable<TValue>
    | Iterable<Promise<TValue>>
    | Iterable<TValue>
): AsyncIterator<TValue>
declare export function createAsyncIterator(collection: {
  length: number
}): AsyncIterator<mixed>

declare export function forAwaitEach<
  TValue,
  TCollection: AsyncIterable<TValue>
>(
  collection: TCollection,
  callbackFn: (value: TValue, index: number, collection: TCollection) => any,
  thisArg?: any
): Promise<void>
declare export function forAwaitEach<
  TValue,
  TCollection: Iterable<Promise<TValue>>
>(
  collection: TCollection,
  callbackFn: (value: TValue, index: number, collection: TCollection) => any,
  thisArg?: any
): Promise<void>
declare export function forAwaitEach<TValue, TCollection: Iterable<TValue>>(
  collection: TCollection,
  callbackFn: (value: TValue, index: number, collection: TCollection) => any,
  thisArg?: any
): Promise<void>
declare export function forAwaitEach<TCollection: { length: number }>(
  collection: TCollection,
  callbackFn: (value: mixed, index: number, collection: TCollection) => any,
  thisArg?: any
): Promise<void>
